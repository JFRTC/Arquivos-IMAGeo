/* Version: 0.6.1
   Date: 2024-05-23 */

L.Control.GroupedLayers = L.Control.extend({
  options: {
    collapsed: !0,
    position: "topright",
    autoZIndex: !0,
    exclusiveGroups: [],
    groupCheckboxes: !1
  },

  initialize: function (a, b, c) {
    var d, e;
    L.Util.setOptions(this, c),
      (this._layers = []),
      (this._lastZIndex = 0),
      (this._handlingClick = !1),
      (this._groupList = []),
      (this._domGroups = []);

    for (d in a) this._addLayer(a[d], d);
    for (d in b) for (e in b[d]) this._addLayer(b[d][e], e, d, !0);
  },

  onAdd: function (a) {
    return this._initLayout(), this._update(), a.on("layeradd", this._onLayerChange, this).on("layerremove", this._onLayerChange, this), this._container;
  },

  onRemove: function (a) {
    a.off("layeradd", this._onLayerChange, this).off("layerremove", this._onLayerChange, this), this._container;
  },

  addBaseLayer: function (a, b) {
    return this._addLayer(a, b), this._update(), this;
  },

  addOverlay: function (a, b, c) {
    return this._addLayer(a, b, c, !0), this._update(), this;
  },

  removeLayer: function (a) {
    var b = L.Util.stamp(a),
      c = this._getLayer(b);
    return c && delete this._layers[this._layers.indexOf(c)], this._update(), this;
  },

  _getLayer: function (a) {
    for (var b = 0; b < this._layers.length; b++)
      if (this._layers[b] && L.stamp(this._layers[b].layer) === a) return this._layers[b];
  },

  _initLayout: function () {
    var a = "leaflet-control-layers",
      b = this._container = L.DomUtil.create("div", a);
    b.setAttribute("aria-haspopup", !0),
      L.Browser.touch
        ? L.DomEvent.on(b, "click", L.DomEvent.stopPropagation).on(b, "click", this._expand, this)
        : (L.DomEvent.disableClickPropagation(b),
          L.DomEvent.on(b, "wheel", L.DomEvent.stopPropagation)),
      (this._form = L.DomUtil.create("form", a + "-list", b)),
      this.options.collapsed
        ? (L.Browser.android ||
            L.DomEvent.on(b, "mouseover", this._expand, this).on(b, "mouseout", this._collapse, this),
          (this._layersLink = L.DomUtil.create("a", a + "-toggle", b)),
          (this._layersLink.href = "#"),
          (this._layersLink.title = "Layers"),
          L.Browser.touch
            ? L.DomEvent.on(this._layersLink, "click", L.DomEvent.stop).on(this._layersLink, "click", this._expand, this)
            : L.DomEvent.on(this._layersLink, "focus", this._expand, this),
          this._map.on("click", this._collapse, this))
        : this._expand();

    this._baseLayersList = L.DomUtil.create("div", a + "-base", this._form),
      (this._separator = L.DomUtil.create("div", a + "-separator", this._form)),
      (this._overlaysList = L.DomUtil.create("div", a + "-overlays", this._form)),
      b.appendChild(this._form);
  },

  _addLayer: function (a, b, c, d) {
    var e = (L.Util.stamp(a), {
      layer: a,
      name: b,
      overlay: d
    });
    this._layers.push(e),
      c = c || "";
    var f = this._indexOf(this._groupList, c);
    -1 === f && (f = this._groupList.push(c) - 1);
    var g = -1 !== this._indexOf(this.options.exclusiveGroups, c);
    e.group = { name: c, id: f, exclusive: g },
      this.options.autoZIndex && a.setZIndex && (this._lastZIndex++, a.setZIndex(this._lastZIndex));
  },

  _update: function () {
    if (this._container) {
      (this._baseLayersList.innerHTML = ""),
        (this._overlaysList.innerHTML = ""),
        (this._domGroups.length = 0);
      for (var a, b, c = !1, d = !1, a = 0; a < this._layers.length; a++)
        (b = this._layers[a]),
          this._addItem(b),
          (d = d || b.overlay),
          (c = c || !b.overlay);
      this._separator.style.display = d && c ? "" : "none";
    }
  },

  _onLayerChange: function (a) {
    var b,
      c = this._getLayer(L.Util.stamp(a.layer));
    c &&
      (this._handlingClick || this._update(),
      (b = c.overlay ? "layeradd" === a.type ? "overlayadd" : "overlayremove" : "layeradd" === a.type ? "baselayerchange" : null),
      b && this._map.fire(b, c));
  },

  _createRadioElement: function (a, b) {
    var c = '<input type="radio" class="leaflet-control-layers-selector" name="' + a + '"';
    return (
      b && (c += ' checked="checked"'),
      (c += '/>'),
      (d = document.createElement("div")),
      (d.innerHTML = c),
      d.firstChild
    );
  },

  _addItem: function (a) {
    var b,
      c,
      d,
      e = document.createElement("label"),
      f = this._map.hasLayer(a.layer);
    a.overlay
      ? a.group.exclusive
        ? ((d = "leaflet-exclusive-group-layer-" + a.group.id),
          (b = this._createRadioElement("leaflet-exclusive-group-layer-" + a.group.id, f)))
        : ((b = document.createElement("input")),
          (b.type = "checkbox"),
          (b.className = "leaflet-control-layers-selector"),
          (b.defaultChecked = f))
      : (b = this._createRadioElement("leaflet-base-layers", f)),
      (b.layerId = L.Util.stamp(a.layer)),
      (b.groupID = a.group.id),
      L.DomEvent.on(b, "click", this._onInputClick, this),
      (c = document.createElement("span")),
      (c.innerHTML = " " + a.name),
      e.appendChild(b),
      e.appendChild(c),
      a.overlay
        ? ((c = this._overlaysList),
          (d = this._domGroups[a.group.id]),
          !d &&
            ((d = document.createElement("div")),
            (d.className = "leaflet-control-layers-group"),
            (d.id = "leaflet-control-layers-group-" + a.group.id),
            (c = this._overlaysList),
            c.appendChild(d)),
          (c = d))
        : (c = this._baseLayersList),
      c.appendChild(e);
  },

  _onGroupInputClick: function () {
    var a = this._domGroups[this.groupID];
    if (a) {
      var b = !L.DomUtil.hasClass(a, "leaflet-control-layers-expanded");
      L.DomUtil[b ? "addClass" : "removeClass"](a, "leaflet-control-layers-expanded");
    }
  },

  _onInputClick: function () {
    var a = this._map.getContainer(),
      b = L.DomUtil.hasClass(a, "leaflet-container"),
      c = this._handlingClick;
    this._handlingClick = !0;
    this._checkDisabledLayers();
    this._refocusOnMap(!b);
    this._handlingClick = !1;
  },

  _checkDisabledLayers: function () {
    var a, b, c;
    this._baseLayersList &&
      ((a = this._baseLayersList.getElementsByTagName("input")),
      (b = !1),
      (c = !1),
      L.DomUtil.removeClass(this._baseLayersList, "leaflet-control-layers-disabled"),
      (b = L.DomUtil.hasClass(this._container, "leaflet-control-layers-expanded")),
      L.DomUtil.removeClass(this._container, "leaflet-control-layers-expanded"),
      L.DomUtil.addClass(this._container, "leaflet-control-layers-expanded"),
      L.DomUtil.addClass(this._overlaysList, "leaflet-control-layers-expanded"),
      (a = a.length - 1),
      (c = !1),
      !0 !== this.options.hideSingleBase && (b = !0),
      !1 !== this.options.autoZIndex && (this._lastZIndex = 0),
      !1 !== this.options.collapsed && (b = !1),
      (this._handlingClick = !0),
      !0 !== this.options.autoZIndex && this._updateZIndex(),
      !1 !== this.options.exclusiveGroups && this._updateOverlayGroupVisibility(),
      !1 !== this.options.collapsed && !1 !== this.options.hideSingleBase && !0 !== this.options.hideSingleOverlay && !0 !== this.options.hideEmptyOverlayGroups && this._update(),
      !0 !== this.options.collapsed && this._expandIfNotCollapsed(),
      !0 !== this.options.collapsed && !0 !== this.options.hideSingleBase && !0 !== this.options.hideSingleOverlay && !0 !== this.options.hideEmptyOverlayGroups && this._expandIfNotCollapsed(),
      (this._handlingClick = !1),
      !1 !== this.options.collapsed && b && L.DomUtil.addClass(this._container, "leaflet-control-layers-expanded"));
  },

  _expandIfNotCollapsed: function () {
    this.options.collapsed || this._expand();
  },

  _expand: function () {
    L.DomUtil.addClass(this._container, "leaflet-control-layers-expanded");
  },

  _collapse: function () {
    L.DomUtil.removeClass(this._container, "leaflet-control-layers-expanded");
  },

  _getLayer: function (a) {
    for (var b = 0; b < this._layers.length; b++)
      if (this._layers[b] && L.Util.stamp(this._layers[b].layer) === a) return this._layers[b];
  },

  _indexOf: function (a, b) {
    for (var c = 0; c < a.length; c++) if (a[c] === b) return c;
    return -1;
  },

  _onMouseDown: function (a) {
    a.stopPropagation ? a.stopPropagation() : (a.cancelBubble = !0);
  },

  _onClick: function (a) {
    var b = a.srcElement || a.target;
    b.disabled || (b.parentNode && (L.DomUtil.hasClass(b.parentNode, "leaflet-control-layers-disabled") || (L.DomUtil.removeClass(b.parentNode, "leaflet-control-layers-expanded"), L.DomUtil.addClass(b.parentNode, "leaflet-control-layers-expanded"))), L.DomEvent.stopPropagation(a), this._handlingClick = !1;
  },

  _onOverlayRemove: function (a) {
    this._layers = this._layers.filter(function (b) {
      return b.layer.get("overlay") !== a.overlay;
    });
  },

  _onBaseLayerChange: function (a) {
    this._handlingClick = !0;
    for (var b = 0; b < this._layers.length; b++)
      if (this._layers[b].layer.get("overlay")) this._layers[b].input.parentNode.style.display = "none";
      else if (this._layers[b].layer.get("base") && this._layers[b].layer.get("base") !== a.layer) this._layers[b].input.parentNode.style.display = "none";
      else {
        this._layers[b].input.parentNode.style.display = "";
        this._update();
      }
    this._handlingClick = !1;
  },

  _onOverlayAdd: function (a) {
    var b = { layer: a, name: a.get("name"), overlay: a.get("overlay") },
      c = this._layers.length - 1;
    a.get("base") ? this._layers.unshift(b) : this._layers.splice(c, 0, b), this._addItem(b);
  },

  _addItem: function (a) {
    var b = this._layerControlInput(a.layer, a.name, a.overlay),
      c = this._layerControlInput(a.layer, a.name, !1);
    a.overlay ? this._overlaysList.appendChild(b) : this._baseLayersList.appendChild(c);
    this._map.on("overlayremove", this._onOverlayRemove, this);
    this._map.on("baselayerchange", this._onBaseLayerChange, this);
  },

  _updateZIndex: function () {
    for (var a = 0, b = this._layers.length - 1; b >= 0; b--) {
      var c = this._layers[b].layer;
      if (c.get("overlay")) {
        c.setZIndex(this._lastZIndex + 1);
        this._lastZIndex++;
      }
    }
  },

  _updateOverlayGroupVisibility: function () {
    var a = this._groupedOverlays = {},
      b = this._layers.length - 1;
    for (b; b >= 0; b--) {
      var c = this._layers[b].layer,
        d = c.get("overlay");
      d && (a[d] = !0);
    }
    for (var e in a) this._updateOverlayVisibility(e);
  },

  _updateOverlayVisibility: function (a) {
    for (var b = 0; b < this._layers.length; b++) {
      var c = this._layers[b].layer;
      c.get("overlay") === a ? (this._layers[b].input.parentNode.style.display = "", c.setVisible(!0)) : (this._layers[b].input.parentNode.style.display = "none", c.setVisible(!1));
    }
  },

  _onInputClick: function () {
    var a = this._handlingClick;
    this._handlingClick = !0;
    this._refocusOnMap();
    !1 !== this.options.autoZIndex && this._updateZIndex();
    !1 !== this.options.exclusiveGroups && this._updateOverlayGroupVisibility();
    this._handlingClick = !1;
  },

  _refocusOnMap: function (a) {
    if (this._map) {
      this._map.getContainer().focus();
      a && this._map.getContainer().scrollIntoView(!0);
    }
  }
});

L.control.groupedLayers = function (a, b, c) {
  return new L.Control.GroupedLayers(a, b, c);
};
